const { test } = require('@kmamal/testing')
const N = require('@kmamal/numbers/js')
const M3 = require('./mat3').defineFor(N)

const tmp = []

test("mat3.isFinite", (t) => {
	t.equal(M3.isFinite([ 0, 0, 0, 0, 0, 0, 0, 0, 0 ]), true)
	t.equal(M3.isFinite([ 10, -5, 1, 0, 0.5, -10000, 8, 0, -16 ]), true)
	t.equal(M3.isFinite([ 0, 0, 0, 0, 0, 0, 0, 0, Infinity ]), false)
	t.equal(M3.isFinite([ Infinity, 0, -Infinity, 0, 0, 0, 0, 0, 0 ]), false)
	t.equal(M3.isFinite([ 0, 3, 5, -5, 4, 7, 1, 9, NaN ]), false)
	t.equal(M3.isFinite([ 4, NaN, 5, 3, 9, 3, 2, 5, 6 ]), false)
	t.equal(M3.isFinite([ NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN ]), false)
})

test("mat3.isNaN", (t) => {
	t.equal(M3.isNaN([ 0, 0, 0, 0, 0, 0, 0, 0, 0 ]), false)
	t.equal(M3.isNaN([ 10, -5, 1, 0, 0.5, -10000, 8, 0, -16 ]), false)
	t.equal(M3.isNaN([ 0, 0, 0, 0, 0, 0, 0, 0, Infinity ]), false)
	t.equal(M3.isNaN([ Infinity, 0, -Infinity, 0, 0, 0, 0, 0, 0 ]), false)
	t.equal(M3.isNaN([ 0, 3, 5, -5, 4, 7, 1, 9, NaN ]), true)
	t.equal(M3.isNaN([ 4, NaN, 5, 3, 9, 3, 2, 5, 6 ]), true)
	t.equal(M3.isNaN([ NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN ]), true)
})

test("mat3.neg", (t) => {
	t.equal(M3.neg([ 0, 0, 0, 0, 0, 0, 0, 0, 0 ]), [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ])
	t.equal(M3.neg([ 4, -3, 1, -2, 5, -7, 8, -9, 6 ]), [ -4, 3, -1, 2, -5, 7, -8, 9, -6 ])
})

test("mat3.neg.to", (t) => {
	t.equal(M3.neg.to(tmp, [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ]), [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ])
	t.equal(M3.neg.to(tmp, [ 4, -3, 1, -2, 5, -7, 8, -9, 6 ]), [ -4, 3, -1, 2, -5, 7, -8, 9, -6 ])
})

test("mat3.neg.$$$", (t) => {
	t.equal(M3.neg.$$$([ 0, 0, 0, 0, 0, 0, 0, 0, 0 ]), [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ])
	t.equal(M3.neg.$$$([ 4, -3, 1, -2, 5, -7, 8, -9, 6 ]), [ -4, 3, -1, 2, -5, 7, -8, 9, -6 ])
})

test("mat3.add", (t) => {
	t.equal(M3.add([ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ]), [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ])
	t.equal(M3.add([ 1, -1, 1, -1, 1, -1, 1, -1, 1 ], [ -1, 1, -1, 1, -1, 1, -1, 1, -1 ]), [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ])
	t.equal(M3.add([ 1, 2, 3, 4, 5, 6, 7, 8, 9 ], [ 10, 11, 12, 13, 14, 15, 16, 17, 18 ]), [ 11, 13, 15, 17, 19, 21, 23, 25, 27 ])
})

test("mat3.add.to", (t) => {
	t.equal(M3.add.to(tmp, [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ]), [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ])
	t.equal(M3.add.to(tmp, [ 1, -1, 1, -1, 1, -1, 1, -1, 1 ], [ -1, 1, -1, 1, -1, 1, -1, 1, -1 ]), [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ])
	t.equal(M3.add.to(tmp, [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ], [ 10, 11, 12, 13, 14, 15, 16, 17, 18 ]), [ 11, 13, 15, 17, 19, 21, 23, 25, 27 ])
})

test("mat3.add.$$$", (t) => {
	t.equal(M3.add.$$$([ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ]), [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ])
	t.equal(M3.add.$$$([ 1, -1, 1, -1, 1, -1, 1, -1, 1 ], [ -1, 1, -1, 1, -1, 1, -1, 1, -1 ]), [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ])
	t.equal(M3.add.$$$([ 1, 2, 3, 4, 5, 6, 7, 8, 9 ], [ 10, 11, 12, 13, 14, 15, 16, 17, 18 ]), [ 11, 13, 15, 17, 19, 21, 23, 25, 27 ])
})

test("mat3.sub", (t) => {
	t.equal(M3.sub([ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ]), [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ])
	t.equal(M3.sub([ 1, -1, 1, -1, 1, -1, 1, -1, 1 ], [ -1, 1, -1, 1, -1, 1, -1, 1, -1 ]), [ 2, -2, 2, -2, 2, -2, 2, -2, 2 ])
	t.equal(M3.sub([ 1, 2, 3, 4, 5, 6, 7, 8, 9 ], [ 10, 11, 12, 13, 14, 15, 16, 17, 18 ]), [ -9, -9, -9, -9, -9, -9, -9, -9, -9 ])
})

test("mat3.sub.to", (t) => {
	t.equal(M3.sub.to(tmp, [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ]), [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ])
	t.equal(M3.sub.to(tmp, [ 1, -1, 1, -1, 1, -1, 1, -1, 1 ], [ -1, 1, -1, 1, -1, 1, -1, 1, -1 ]), [ 2, -2, 2, -2, 2, -2, 2, -2, 2 ])
	t.equal(M3.sub.to(tmp, [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ], [ 10, 11, 12, 13, 14, 15, 16, 17, 18 ]), [ -9, -9, -9, -9, -9, -9, -9, -9, -9 ])
})

test("mat3.sub.$$$", (t) => {
	t.equal(M3.sub.$$$([ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ]), [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ])
	t.equal(M3.sub.$$$([ 1, -1, 1, -1, 1, -1, 1, -1, 1 ], [ -1, 1, -1, 1, -1, 1, -1, 1, -1 ]), [ 2, -2, 2, -2, 2, -2, 2, -2, 2 ])
	t.equal(M3.sub.$$$([ 1, 2, 3, 4, 5, 6, 7, 8, 9 ], [ 10, 11, 12, 13, 14, 15, 16, 17, 18 ]), [ -9, -9, -9, -9, -9, -9, -9, -9, -9 ])
})

test("mat3.mul", (t) => {
	t.equal(M3.mul([ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ]), [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ])
	t.equal(M3.mul([ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1 ]), [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ])
	t.equal(M3.mul([ 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ]), [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ])
	t.equal(M3.mul([ 1, -1, 1, -1, 1, -1, 1, -1, 1 ], [ -1, 1, -1, 1, -1, 1, -1, 1, -1 ]), [ -1, -1, -1, -1, -1, -1, -1, -1, -1 ])
	t.equal(M3.mul([ 1, 2, 3, 4, 5, 6, 7, 8, 9 ], [ 10, 11, 12, 13, 14, 15, 16, 17, 18 ]), [ 10, 22, 36, 52, 70, 90, 112, 136, 162 ])
})

test("mat3.mul.to", (t) => {
	t.equal(M3.mul.to(tmp, [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ]), [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ])
	t.equal(M3.mul.to(tmp, [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1 ]), [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ])
	t.equal(M3.mul.to(tmp, [ 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ]), [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ])
	t.equal(M3.mul.to(tmp, [ 1, -1, 1, -1, 1, -1, 1, -1, 1 ], [ -1, 1, -1, 1, -1, 1, -1, 1, -1 ]), [ -1, -1, -1, -1, -1, -1, -1, -1, -1 ])
	t.equal(M3.mul.to(tmp, [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ], [ 10, 11, 12, 13, 14, 15, 16, 17, 18 ]), [ 10, 22, 36, 52, 70, 90, 112, 136, 162 ])
})

test("mat3.mul.$$$", (t) => {
	t.equal(M3.mul.$$$([ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ]), [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ])
	t.equal(M3.mul.$$$([ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1 ]), [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ])
	t.equal(M3.mul.$$$([ 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ]), [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ])
	t.equal(M3.mul.$$$([ 1, -1, 1, -1, 1, -1, 1, -1, 1 ], [ -1, 1, -1, 1, -1, 1, -1, 1, -1 ]), [ -1, -1, -1, -1, -1, -1, -1, -1, -1 ])
	t.equal(M3.mul.$$$([ 1, 2, 3, 4, 5, 6, 7, 8, 9 ], [ 10, 11, 12, 13, 14, 15, 16, 17, 18 ]), [ 10, 22, 36, 52, 70, 90, 112, 136, 162 ])
})

test("mat3.div", (t) => {
	t.equal(M3.div([ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ]), [ NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN ])
	t.equal(M3.div([ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]), [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ])
	t.equal(M3.div([ 1, -1, 1, -1, 1, -1, 1, -1, 1 ], [ -1, 1, -1, 1, -1, 1, -1, 1, -1 ]), [ -1, -1, -1, -1, -1, -1, -1, -1, -1 ])
	t.equal(M3.div([ 2, 4, 6, 8, 10, 12, 14, 16, 18 ], [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]), [ 2, 2, 2, 2, 2, 2, 2, 2, 2 ])
})

test("mat3.div.to", (t) => {
	t.equal(M3.div.to(tmp, [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ]), [ NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN ])
	t.equal(M3.div.to(tmp, [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]), [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ])
	t.equal(M3.div.to(tmp, [ 1, -1, 1, -1, 1, -1, 1, -1, 1 ], [ -1, 1, -1, 1, -1, 1, -1, 1, -1 ]), [ -1, -1, -1, -1, -1, -1, -1, -1, -1 ])
	t.equal(M3.div.to(tmp, [ 2, 4, 6, 8, 10, 12, 14, 16, 18 ], [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]), [ 2, 2, 2, 2, 2, 2, 2, 2, 2 ])
})

test("mat3.div.$$$", (t) => {
	t.equal(M3.div.$$$([ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ]), [ NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN ])
	t.equal(M3.div.$$$([ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]), [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ])
	t.equal(M3.div.$$$([ 1, -1, 1, -1, 1, -1, 1, -1, 1 ], [ -1, 1, -1, 1, -1, 1, -1, 1, -1 ]), [ -1, -1, -1, -1, -1, -1, -1, -1, -1 ])
	t.equal(M3.div.$$$([ 2, 4, 6, 8, 10, 12, 14, 16, 18 ], [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]), [ 2, 2, 2, 2, 2, 2, 2, 2, 2 ])
})

test("mat3.transpose", (t) => {
	t.equal(M3.transpose([ 0, 0, 0, 0, 0, 0, 0, 0, 0 ]), [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ])
	t.equal(M3.transpose([ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]), [ 1, 4, 7, 2, 5, 8, 3, 6, 9 ])
})

test("mat3.transpose.to", (t) => {
	t.equal(M3.transpose.to(tmp, [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ]), [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ])
	t.equal(M3.transpose.to(tmp, [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]), [ 1, 4, 7, 2, 5, 8, 3, 6, 9 ])
})

test("mat3.transpose.$$$", (t) => {
	t.equal(M3.transpose.$$$([ 0, 0, 0, 0, 0, 0, 0, 0, 0 ]), [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ])
	t.equal(M3.transpose.$$$([ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]), [ 1, 4, 7, 2, 5, 8, 3, 6, 9 ])
})

test("mat3.mulMatVec", (t) => {
	t.equal(M3.mulMatVec([ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 1, 1, 1 ]), [ 0, 0, 0 ])
	t.equal(M3.mulMatVec([ 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 0, 0, 0 ]), [ 0, 0, 0 ])
	t.equal(M3.mulMatVec([ 1, 0, 0, 0, 1, 0, 0, 0, 1 ], [ 2, 3, 4 ]), [ 2, 3, 4 ])
	t.equal(M3.mulMatVec([ 0, 0, 1, 0, 1, 0, 1, 0, 0 ], [ 2, 3, 4 ]), [ 4, 3, 2 ])
	t.equal(M3.mulMatVec([ 2, 3, 4, 5, 6, 7, 8, 9, 10 ], [ 11, 12, 13 ]), [ 110, 218, 326 ])
})

test("mat3.mulMatVec.to", (t) => {
	t.equal(M3.mulMatVec.to(tmp, [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 1, 1, 1 ]), [ 0, 0, 0 ])
	t.equal(M3.mulMatVec.to(tmp, [ 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 0, 0, 0 ]), [ 0, 0, 0 ])
	t.equal(M3.mulMatVec.to(tmp, [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ], [ 2, 3, 4 ]), [ 2, 3, 4 ])
	t.equal(M3.mulMatVec.to(tmp, [ 0, 0, 1, 0, 1, 0, 1, 0, 0 ], [ 2, 3, 4 ]), [ 4, 3, 2 ])
	t.equal(M3.mulMatVec.to(tmp, [ 2, 3, 4, 5, 6, 7, 8, 9, 10 ], [ 11, 12, 13 ]), [ 110, 218, 326 ])
})

test("mat3.mulMatVec.$$$", (t) => {
	t.equal(M3.mulMatVec.$$$([ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 1, 1, 1 ]), [ 0, 0, 0 ])
	t.equal(M3.mulMatVec.$$$([ 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 0, 0, 0 ]), [ 0, 0, 0 ])
	t.equal(M3.mulMatVec.$$$([ 1, 0, 0, 0, 1, 0, 0, 0, 1 ], [ 2, 3, 4 ]), [ 2, 3, 4 ])
	t.equal(M3.mulMatVec.$$$([ 0, 0, 1, 0, 1, 0, 1, 0, 0 ], [ 2, 3, 4 ]), [ 4, 3, 2 ])
	t.equal(M3.mulMatVec.$$$([ 2, 3, 4, 5, 6, 7, 8, 9, 10 ], [ 11, 12, 13 ]), [ 110, 218, 326 ])
})

test("mat3.mulMatMat", (t) => {
	t.equal(M3.mulMatMat([ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1 ]), [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ])
	t.equal(M3.mulMatMat([ 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ]), [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ])
	t.equal(M3.mulMatMat([ 1, 0, 0, 0, 1, 0, 0, 0, 1 ], [ 2, 3, 4, 5, 6, 7, 8, 9, 10 ]), [ 2, 3, 4, 5, 6, 7, 8, 9, 10 ])
	t.equal(M3.mulMatMat([ 2, 3, 4, 5, 6, 7, 8, 9, 10 ], [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ]), [ 2, 3, 4, 5, 6, 7, 8, 9, 10 ])
	t.equal(M3.mulMatMat([ 0, 0, 1, 0, 1, 0, 1, 0, 0 ], [ 2, 3, 4, 5, 6, 7, 8, 9, 10 ]), [ 8, 9, 10, 5, 6, 7, 2, 3, 4 ])
	t.equal(M3.mulMatMat([ 2, 3, 4, 5, 6, 7, 8, 9, 10 ], [ 11, 12, 13, 14, 15, 16, 17, 18, 19 ]), [ 132, 141, 150, 258, 276, 294, 384, 411, 438 ])
})

test("mat3.mulMatMat.to", (t) => {
	t.equal(M3.mulMatMat.to(tmp, [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1 ]), [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ])
	t.equal(M3.mulMatMat.to(tmp, [ 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ]), [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ])
	t.equal(M3.mulMatMat.to(tmp, [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ], [ 2, 3, 4, 5, 6, 7, 8, 9, 10 ]), [ 2, 3, 4, 5, 6, 7, 8, 9, 10 ])
	t.equal(M3.mulMatMat.to(tmp, [ 2, 3, 4, 5, 6, 7, 8, 9, 10 ], [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ]), [ 2, 3, 4, 5, 6, 7, 8, 9, 10 ])
	t.equal(M3.mulMatMat.to(tmp, [ 0, 0, 1, 0, 1, 0, 1, 0, 0 ], [ 2, 3, 4, 5, 6, 7, 8, 9, 10 ]), [ 8, 9, 10, 5, 6, 7, 2, 3, 4 ])
	t.equal(M3.mulMatMat.to(tmp, [ 2, 3, 4, 5, 6, 7, 8, 9, 10 ], [ 11, 12, 13, 14, 15, 16, 17, 18, 19 ]), [ 132, 141, 150, 258, 276, 294, 384, 411, 438 ])
})

test("mat3.mulMatMat.$$$", (t) => {
	t.equal(M3.mulMatMat.$$$([ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1 ]), [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ])
	t.equal(M3.mulMatMat.$$$([ 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ]), [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ])
	t.equal(M3.mulMatMat.$$$([ 1, 0, 0, 0, 1, 0, 0, 0, 1 ], [ 2, 3, 4, 5, 6, 7, 8, 9, 10 ]), [ 2, 3, 4, 5, 6, 7, 8, 9, 10 ])
	t.equal(M3.mulMatMat.$$$([ 2, 3, 4, 5, 6, 7, 8, 9, 10 ], [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ]), [ 2, 3, 4, 5, 6, 7, 8, 9, 10 ])
	t.equal(M3.mulMatMat.$$$([ 0, 0, 1, 0, 1, 0, 1, 0, 0 ], [ 2, 3, 4, 5, 6, 7, 8, 9, 10 ]), [ 8, 9, 10, 5, 6, 7, 2, 3, 4 ])
	t.equal(M3.mulMatMat.$$$([ 2, 3, 4, 5, 6, 7, 8, 9, 10 ], [ 11, 12, 13, 14, 15, 16, 17, 18, 19 ]), [ 132, 141, 150, 258, 276, 294, 384, 411, 438 ])
})

test("mat3.eq", (t) => {
	t.equal(M3.eq([ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ]), true)
	t.equal(M3.eq([ 1, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ]), false)
	t.equal(M3.eq([ 2, 3, 4, 5, 6, 7, 8, 9, 10 ], [ 2, 3, 4, 5, 6, 7, 8, 9, 10 ]), true)
	t.equal(M3.eq([ 1, -1, 1, -1, 1, -1, 1, -1, 1 ], [ 1, 1, 1, -1, 1, -1, 1, -1, 1 ]), false)
	t.equal(M3.eq([ NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN ], [ NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN ]), false)
})

test("mat3.neq", (t) => {
	t.equal(M3.neq([ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ]), false)
	t.equal(M3.neq([ 1, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ]), true)
	t.equal(M3.neq([ 2, 3, 4, 5, 6, 7, 8, 9, 10 ], [ 2, 3, 4, 5, 6, 7, 8, 9, 10 ]), false)
	t.equal(M3.neq([ 1, -1, 1, -1, 1, -1, 1, -1, 1 ], [ 1, 1, 1, -1, 1, -1, 1, -1, 1 ]), true)
	t.equal(M3.neq([ NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN ], [ NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN ]), true)
})

test("mat3.scale", (t) => {
	t.equal(M3.scale([ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], 1), [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ])
	t.equal(M3.scale([ 1, 0, 0, 0, 0, 0, 0, 0, 0 ], 1), [ 1, 0, 0, 0, 0, 0, 0, 0, 0 ])
	t.equal(M3.scale([ 0, 1, 0, 0, 0, 0, 0, 0, 0 ], 1), [ 0, 1, 0, 0, 0, 0, 0, 0, 0 ])
	t.equal(M3.scale([ 0, 0, 1, 0, 0, 0, 0, 0, 0 ], 1), [ 0, 0, 1, 0, 0, 0, 0, 0, 0 ])
	t.equal(M3.scale([ 0, 0, 0, 1, 0, 0, 0, 0, 0 ], 1), [ 0, 0, 0, 1, 0, 0, 0, 0, 0 ])
	t.equal(M3.scale([ 0, 0, 0, 0, 1, 0, 0, 0, 0 ], 1), [ 0, 0, 0, 0, 1, 0, 0, 0, 0 ])
	t.equal(M3.scale([ 0, 0, 0, 0, 0, 1, 0, 0, 0 ], 1), [ 0, 0, 0, 0, 0, 1, 0, 0, 0 ])
	t.equal(M3.scale([ 0, 0, 0, 0, 0, 0, 1, 0, 0 ], 1), [ 0, 0, 0, 0, 0, 0, 1, 0, 0 ])
	t.equal(M3.scale([ 0, 0, 0, 0, 0, 0, 0, 1, 0 ], 1), [ 0, 0, 0, 0, 0, 0, 0, 1, 0 ])
	t.equal(M3.scale([ 0, 0, 0, 0, 0, 0, 0, 0, 1 ], 1), [ 0, 0, 0, 0, 0, 0, 0, 0, 1 ])
	t.equal(M3.scale([ 1, 2, 3, 4, 5, 6, 7, 8, 9 ], 2), [ 2, 4, 6, 8, 10, 12, 14, 16, 18 ])
})

test("mat3.scale.to", (t) => {
	t.equal(M3.scale.to(tmp, [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], 1), [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ])
	t.equal(M3.scale.to(tmp, [ 1, 0, 0, 0, 0, 0, 0, 0, 0 ], 1), [ 1, 0, 0, 0, 0, 0, 0, 0, 0 ])
	t.equal(M3.scale.to(tmp, [ 0, 1, 0, 0, 0, 0, 0, 0, 0 ], 1), [ 0, 1, 0, 0, 0, 0, 0, 0, 0 ])
	t.equal(M3.scale.to(tmp, [ 0, 0, 1, 0, 0, 0, 0, 0, 0 ], 1), [ 0, 0, 1, 0, 0, 0, 0, 0, 0 ])
	t.equal(M3.scale.to(tmp, [ 0, 0, 0, 1, 0, 0, 0, 0, 0 ], 1), [ 0, 0, 0, 1, 0, 0, 0, 0, 0 ])
	t.equal(M3.scale.to(tmp, [ 0, 0, 0, 0, 1, 0, 0, 0, 0 ], 1), [ 0, 0, 0, 0, 1, 0, 0, 0, 0 ])
	t.equal(M3.scale.to(tmp, [ 0, 0, 0, 0, 0, 1, 0, 0, 0 ], 1), [ 0, 0, 0, 0, 0, 1, 0, 0, 0 ])
	t.equal(M3.scale.to(tmp, [ 0, 0, 0, 0, 0, 0, 1, 0, 0 ], 1), [ 0, 0, 0, 0, 0, 0, 1, 0, 0 ])
	t.equal(M3.scale.to(tmp, [ 0, 0, 0, 0, 0, 0, 0, 1, 0 ], 1), [ 0, 0, 0, 0, 0, 0, 0, 1, 0 ])
	t.equal(M3.scale.to(tmp, [ 0, 0, 0, 0, 0, 0, 0, 0, 1 ], 1), [ 0, 0, 0, 0, 0, 0, 0, 0, 1 ])
	t.equal(M3.scale.to(tmp, [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ], 2), [ 2, 4, 6, 8, 10, 12, 14, 16, 18 ])
})

test("mat3.scale.$$$", (t) => {
	t.equal(M3.scale.$$$([ 0, 0, 0, 0, 0, 0, 0, 0, 0 ], 1), [ 0, 0, 0, 0, 0, 0, 0, 0, 0 ])
	t.equal(M3.scale.$$$([ 1, 0, 0, 0, 0, 0, 0, 0, 0 ], 1), [ 1, 0, 0, 0, 0, 0, 0, 0, 0 ])
	t.equal(M3.scale.$$$([ 0, 1, 0, 0, 0, 0, 0, 0, 0 ], 1), [ 0, 1, 0, 0, 0, 0, 0, 0, 0 ])
	t.equal(M3.scale.$$$([ 0, 0, 1, 0, 0, 0, 0, 0, 0 ], 1), [ 0, 0, 1, 0, 0, 0, 0, 0, 0 ])
	t.equal(M3.scale.$$$([ 0, 0, 0, 1, 0, 0, 0, 0, 0 ], 1), [ 0, 0, 0, 1, 0, 0, 0, 0, 0 ])
	t.equal(M3.scale.$$$([ 0, 0, 0, 0, 1, 0, 0, 0, 0 ], 1), [ 0, 0, 0, 0, 1, 0, 0, 0, 0 ])
	t.equal(M3.scale.$$$([ 0, 0, 0, 0, 0, 1, 0, 0, 0 ], 1), [ 0, 0, 0, 0, 0, 1, 0, 0, 0 ])
	t.equal(M3.scale.$$$([ 0, 0, 0, 0, 0, 0, 1, 0, 0 ], 1), [ 0, 0, 0, 0, 0, 0, 1, 0, 0 ])
	t.equal(M3.scale.$$$([ 0, 0, 0, 0, 0, 0, 0, 1, 0 ], 1), [ 0, 0, 0, 0, 0, 0, 0, 1, 0 ])
	t.equal(M3.scale.$$$([ 0, 0, 0, 0, 0, 0, 0, 0, 1 ], 1), [ 0, 0, 0, 0, 0, 0, 0, 0, 1 ])
	t.equal(M3.scale.$$$([ 1, 2, 3, 4, 5, 6, 7, 8, 9 ], 2), [ 2, 4, 6, 8, 10, 12, 14, 16, 18 ])
})

test("mat3.inverse", (t) => {
	t.throws(() => { M3.inverse([ 0, 0, 0, 0, 0, 0, 0, 0, 0 ]) })
	t.equal(M3.inverse([ 1, 0, 0, 0, 1, 0, 0, 0, 1 ]), [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ])
	t.equal(M3.inverse([ 0, 0, 1, 0, 1, 0, 1, 0, 0 ]), [ 0, 0, 1, 0, 1, 0, 1, 0, 0 ])
	t.equal(M3.inverse([ 2, 0, 0, 0, 2, 0, 0, 0, 2 ]), [ 0.5, 0, 0, 0, 0.5, 0, 0, 0, 0.5 ])
	t.equal(M3.inverse([ 2, 5, 0, 0, 1, 1, -1, 0, 3 ]), [ 3, -15, 5, -1, 6, -2, 1, -5, 2 ])
})
